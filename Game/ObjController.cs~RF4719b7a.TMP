using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

public class ObjController : MonoBehaviour {

    public GameObject 
        clue1, clue2, clue3,          //단서
        fridge_L, fridge_R,                                 //냉장고 문
        trash1_body, trash2_body, trash3_body, trash4_body, //쓰레기 통
        trash1_lid, trash2_lid,trash3_lid, Trash4_lid;      //쓰레기 뚜껑
    public ParticleSystem eff_clue1, eff_clue2, eff_clue3;
    public Button clueBox1, clueBox2, clueBox3;              //clue 박스

    //변수
    GameObject target;
    bool play = true;
    int[] angle_fridge = new int[2] {0,0};
    int[] angle_trash = new int[4] {0,0,0,0};
    Vector3 effectScale = new Vector3(1.2f, 1.2f, 1.2f);

    public void setPlay(bool play) {
        this.play = play;
    }

    void Update()
    {
        if (play)
            ObjectClick();
    }

    void ObjectClick() {
        if (Input.GetMouseButtonUp(0))
        {
            target = GetClickedObject();
            if (target != null) {

                //냉장고
                if (target.Equals(fridge_L))
                    StartCoroutine(Motion_Fridge(fridge_L, 0));
                else if (target.Equals(fridge_R))
                    StartCoroutine(Motion_Fridge(fridge_R, 1));

                //쓰레기통
                else if (target.Equals(trash1_body))
                    StartCoroutine(Motion_Trash(trash1_lid, 0));
                else if (target.Equals(trash2_body))
                    StartCoroutine(Motion_Trash(trash2_lid, 1));
                else if (target.Equals(trash3_body))
                    StartCoroutine(Motion_Trash(trash3_lid, 2));
                else if (target.Equals(trash4_body))
                    StartCoroutine(Motion_Trash(Trash4_lid, 3));

                //단서
                else if (target.Equals(clue1)|| target.Equals(clue2)|| target.Equals(clue3)) {
                    GetComponent<SoundController>().Play_effect(0);
                    target.SetActive(false);
                    if (target.Equals(clue1)) {
                        clueBox1.interactable = true;
                        eff_clue1.transform.localScale = effectScale * Camera.main.orthographicSize / 5;
                        eff_clue1.Play();
                        GetComponent<DialogController>().Message("페트병");
                    }
                    else if (target.Equals(clue2)) {
                        clueBox2.interactable = true;
                        eff_clue2.transform.localScale = effectScale * Camera.main.orthographicSize / 5;
                        eff_clue2.Play();
                        GetComponent<DialogController>().Message("닭뼈");
                    }
                    else if (target.Equals(clue3)) {
                        clueBox3.interactable = true;
                        eff_clue3.transform.localScale = effectScale * Camera.main.orthographicSize / 5;
                        eff_clue3.Play();
                        GetComponent<DialogController>().Message("아이스팩");
                    }
                    if (clueBox1.interactable && clueBox2.interactable && clueBox3.interactable) {
                        Invoke("Collected", 3f);
                    }
                }
            }
        }
    }

    void Collected() {
        GetComponent<DialogController>().Dialog_Start("stage1_clear1", "PET 병을 올바르게 분리수거하세요.");
    }

    IEnumerator Motion_Fridge(GameObject obj, int num)
    {
        Vector3 vec = num==0 ? Vector3.forward : Vector3.back;

        //냉장고 열기
        if (angle_fridge[num] <= 0)
            while (angle_fridge[num] < 120)
            {
                if (play) {
                    obj.transform.Rotate(vec, 4);
                    angle_fridge[num] += 4;
                }
                yield return null;
            }
        //냉장고 닫기
        else if (angle_fridge[num] >= 120)
            while (angle_fridge[num] > 0)
            {
                if (play) {
                    obj.transform.Rotate(vec, -4);
                    angle_fridge[num] -= 4;
                }
                yield return null;
            }
    }

    IEnumerator Motion_Trash(GameObject obj,int num)
    {
        Vector3 vec = Vector3.left;

        //쓰레기통 열기
        if (angle_trash[num] <= 0)
        {
            while (angle_trash[num] < 100)
            {
                if (play) {
                    obj.transform.Rotate(vec, 4);
                    angle_trash[num] += 4;
                }
                yield return null;
            }
        }
        //쓰레기통 닫기
        else if (angle_trash[num] >= 100)
        {
            while (angle_trash[num] > 0)
            {
                if (play) {
                    obj.transform.Rotate(vec, -4);
                    angle_trash[num] -= 4;
                }
                yield return null;
            }
        }
    }

    //클릭한 오브젝트를 반환
    GameObject GetClickedObject()
    {

        RaycastHit[] hits; 
        GameObject target = null;
        float MaxDistance = 30f;

        //마우스 포인트 근처 좌표를 만든다.
        Ray ray = Camera.main.ScreenPointToRay(Input.mousePosition);  

        // Raycast : 터치한 위치의 일직선 상(z축)으로 있는 콜라이더 인식
        hits = Physics.RaycastAll(ray.origin, ray.direction * 10, MaxDistance);

        //스테이지 회전을 위해 스테이지가 가장 먼저 콜라이더에 닿으므로 2개 이상이 잡힐 때 작동해야함 
        if (hits.Length>1)   
        {
            //있으면 오브젝트를 저장한다.
            target = hits[1].collider.gameObject;
            //print("오브젝트 클릭 이벤트 발생 : "+target.name);
        }

        return target;

    }
    

}
